//val input = List(1714, 1960, 1256, 1597, 1853, 1609, 1936, 2003, 1648, 1903, 1248, 1525, 1330, 1281, 1573, 1892, 1563, 1500, 1858, 176, 1802, 1370, 1708, 1453, 1342, 1830, 1580, 1607, 1848, 1626, 1602, 1919, 1640, 1574, 1414, 766, 1581, 1924, 1727, 1949, 1406, 323, 957, 1862, 1354, 1427, 1583, 1067, 1863, 1553, 1923, 1990, 691, 1372, 1357, 1887, 1485, 1799, 1270, 1743, 1601, 1457, 1723, 1888, 1272, 1600, 1880, 1381, 1413, 1452, 277, 1866, 1542, 1693, 1760, 1637, 1675, 1975, 1304, 1327, 1985, 1842, 1255, 1915, 1266, 1944, 1824, 1770, 1392, 1259, 1313, 1547, 1293, 1393, 1896, 1828, 1642, 1979, 1871, 1502, 1548, 1508, 710, 1786, 1845, 1334, 1362, 1940, 2009, 1271, 1448, 1964, 1676, 1654, 1804, 1835, 1910, 1939, 1298, 1572, 1704, 1841, 1399, 1576, 1164, 1868, 1035, 262, 1569, 1639, 1669, 1543, 1616, 1658, 1750, 1765, 1718, 1861, 1351, 1531, 1665, 1771, 1348, 1289, 875, 1408, 1486, 1275, 1625, 1594, 1816, 704, 1800, 1564, 1291, 1234, 1981, 1843, 1387, 1938, 1827, 1883, 1911, 1755, 1353, 1808, 1498, 1416, 2006, 1916, 1411, 1539, 1963, 1874, 1898, 1951, 1292, 1366, 1912, 1369, 1478, 1359, 1859, 1421, 1384, 1534, 1283, 1913, 1794, 1494, 1860, 1312, 1869, 1730, 1510, 1319, 1428, 1706, 1432, 1532)
val input = List(1721 , 979 , 366 , 299 , 675, 1456)

input.combinations(2).filter {
  case List(a, b) => a+b == 2020
}.map {
  case List(a,b) => a * b
}.toList.head


//input.combinations(2).filter()
//input.sliding(2, 1).foldLeft(0)((acc, l) => {
//  println(l(0) + l(1))
//  if (l(0) + l(1) == 2020) {
//    l(0) * l(1)
//  }
//  0
//})
val data = Array(
  (27120,(Array("27120", "2011-12-01 09:59:17.0", "2013-09-07 08:29:37.0", "Dale, Hanson", "2578 Ingram Road, Inglewood, CA, 90309"),8)),
  (92694,(Array("92694", "2013-01-25 04:11:10.0", "2013-12-04 02:31:35.0", "Stacy, Allbritton", "4990 Clearview Drive, Sacramento, CA, 94215"),2)),
  (40581,(Array("40581", "2012-04-03 17:53:32.0", "2013-12-10 22:46:16.0", "Norman, Scanlon", "312 Ocala Street, Sacramento, CA, 95761"),2))
)


data.map(
  tuple => (
    tuple._1, tuple._2._2
  )
)

